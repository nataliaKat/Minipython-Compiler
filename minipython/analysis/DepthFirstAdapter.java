/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPGoal().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getGoalHelper().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGoalHelper) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFuncGoalHelper(AFuncGoalHelper node)
    {
        defaultIn(node);
    }

    public void outAFuncGoalHelper(AFuncGoalHelper node)
    {
        defaultOut(node);
    }

    public void caseAFuncGoalHelper(AFuncGoalHelper node)
    {
        inAFuncGoalHelper(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFuncGoalHelper(node);
    }

    public void inAStmtGoalHelper(AStmtGoalHelper node)
    {
        defaultIn(node);
    }

    public void outAStmtGoalHelper(AStmtGoalHelper node)
    {
        defaultOut(node);
    }

    public void caseAStmtGoalHelper(AStmtGoalHelper node)
    {
        inAStmtGoalHelper(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStmtGoalHelper(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getArgument().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PArgument) temp[i]).apply(this);
            }
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAFunction(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PValue) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getNotFirstArgument().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PNotFirstArgument) temp[i]).apply(this);
            }
        }
        outAArgument(node);
    }

    public void inANotFirstArgument(ANotFirstArgument node)
    {
        defaultIn(node);
    }

    public void outANotFirstArgument(ANotFirstArgument node)
    {
        defaultOut(node);
    }

    public void caseANotFirstArgument(ANotFirstArgument node)
    {
        inANotFirstArgument(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PValue) temp[i]).apply(this);
            }
        }
        outANotFirstArgument(node);
    }

    public void inAConditionStatement(AConditionStatement node)
    {
        defaultIn(node);
    }

    public void outAConditionStatement(AConditionStatement node)
    {
        defaultOut(node);
    }

    public void caseAConditionStatement(AConditionStatement node)
    {
        inAConditionStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAConditionStatement(node);
    }

    public void inALoopWhileStatement(ALoopWhileStatement node)
    {
        defaultIn(node);
    }

    public void outALoopWhileStatement(ALoopWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseALoopWhileStatement(ALoopWhileStatement node)
    {
        inALoopWhileStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outALoopWhileStatement(node);
    }

    public void inALoopForStatement(ALoopForStatement node)
    {
        defaultIn(node);
    }

    public void outALoopForStatement(ALoopForStatement node)
    {
        defaultOut(node);
    }

    public void caseALoopForStatement(ALoopForStatement node)
    {
        inALoopForStatement(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outALoopForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        {
            Object temp[] = node.getR().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAPrintStatement(node);
    }

    public void inAAssignEqStatement(AAssignEqStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignEqStatement(AAssignEqStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignEqStatement(AAssignEqStatement node)
    {
        inAAssignEqStatement(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssignEqStatement(node);
    }

    public void inAAssignEqOperationStatement(AAssignEqOperationStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignEqOperationStatement(AAssignEqOperationStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignEqOperationStatement(AAssignEqOperationStatement node)
    {
        inAAssignEqOperationStatement(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssignEqOperationStatement(node);
    }

    public void inAArrayAssignStatement(AArrayAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAArrayAssignStatement(AArrayAssignStatement node)
    {
        defaultOut(node);
    }

    public void caseAArrayAssignStatement(AArrayAssignStatement node)
    {
        inAArrayAssignStatement(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEx1() != null)
        {
            node.getEx1().apply(this);
        }
        if(node.getEx2() != null)
        {
            node.getEx2().apply(this);
        }
        outAArrayAssignStatement(node);
    }

    public void inAAssertStatement(AAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatement(AAssertStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        inAAssertStatement(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        {
            Object temp[] = node.getR().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAAssertStatement(node);
    }

    public void inAFuncCallStatement(AFuncCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFuncCallStatement(AFuncCallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallStatement(AFuncCallStatement node)
    {
        inAFuncCallStatement(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncCallStatement(node);
    }

    public void inAImportStatement(AImportStatement node)
    {
        defaultIn(node);
    }

    public void outAImportStatement(AImportStatement node)
    {
        defaultOut(node);
    }

    public void caseAImportStatement(AImportStatement node)
    {
        inAImportStatement(node);
        if(node.getImportRule() != null)
        {
            node.getImportRule().apply(this);
        }
        outAImportStatement(node);
    }

    public void inAPlusExpression(APlusExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression(APlusExpression node)
    {
        defaultOut(node);
    }

    public void caseAPlusExpression(APlusExpression node)
    {
        inAPlusExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAPlusExpression(node);
    }

    public void inAArithmeticOperationExpression(AArithmeticOperationExpression node)
    {
        defaultIn(node);
    }

    public void outAArithmeticOperationExpression(AArithmeticOperationExpression node)
    {
        defaultOut(node);
    }

    public void caseAArithmeticOperationExpression(AArithmeticOperationExpression node)
    {
        inAArithmeticOperationExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAArithmeticOperationExpression(node);
    }

    public void inAValExpression(AValExpression node)
    {
        defaultIn(node);
    }

    public void outAValExpression(AValExpression node)
    {
        defaultOut(node);
    }

    public void caseAValExpression(AValExpression node)
    {
        inAValExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inAMinMaxExpression(AMinMaxExpression node)
    {
        defaultIn(node);
    }

    public void outAMinMaxExpression(AMinMaxExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinMaxExpression(AMinMaxExpression node)
    {
        inAMinMaxExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        {
            Object temp[] = node.getR().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PValue) temp[i]).apply(this);
            }
        }
        outAMinMaxExpression(node);
    }

    public void inALenExpression(ALenExpression node)
    {
        defaultIn(node);
    }

    public void outALenExpression(ALenExpression node)
    {
        defaultOut(node);
    }

    public void caseALenExpression(ALenExpression node)
    {
        inALenExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outALenExpression(node);
    }

    public void inAFunctionExpression(AFunctionExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionExpression(AFunctionExpression node)
    {
        defaultOut(node);
    }

    public void caseAFunctionExpression(AFunctionExpression node)
    {
        inAFunctionExpression(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFunctionExpression(node);
    }

    public void inASubscriptionExpression(ASubscriptionExpression node)
    {
        defaultIn(node);
    }

    public void outASubscriptionExpression(ASubscriptionExpression node)
    {
        defaultOut(node);
    }

    public void caseASubscriptionExpression(ASubscriptionExpression node)
    {
        inASubscriptionExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASubscriptionExpression(node);
    }

    public void inAArrayExpression(AArrayExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayExpression(AArrayExpression node)
    {
        defaultOut(node);
    }

    public void caseAArrayExpression(AArrayExpression node)
    {
        inAArrayExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        {
            Object temp[] = node.getR().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAArrayExpression(node);
    }

    public void inAWithoutFromImportRule(AWithoutFromImportRule node)
    {
        defaultIn(node);
    }

    public void outAWithoutFromImportRule(AWithoutFromImportRule node)
    {
        defaultOut(node);
    }

    public void caseAWithoutFromImportRule(AWithoutFromImportRule node)
    {
        inAWithoutFromImportRule(node);
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        {
            Object temp[] = node.getImportAlias().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PImportAlias) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getNotFirstImportModule().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PNotFirstImportModule) temp[i]).apply(this);
            }
        }
        outAWithoutFromImportRule(node);
    }

    public void inAWithFromImportRule(AWithFromImportRule node)
    {
        defaultIn(node);
    }

    public void outAWithFromImportRule(AWithFromImportRule node)
    {
        defaultOut(node);
    }

    public void caseAWithFromImportRule(AWithFromImportRule node)
    {
        inAWithFromImportRule(node);
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getImportAlias().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PImportAlias) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getNotFirstImportId().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PNotFirstImportId) temp[i]).apply(this);
            }
        }
        outAWithFromImportRule(node);
    }

    public void inAModule(AModule node)
    {
        defaultIn(node);
    }

    public void outAModule(AModule node)
    {
        defaultOut(node);
    }

    public void caseAModule(AModule node)
    {
        inAModule(node);
        {
            Object temp[] = node.getModuleCaller().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PModuleCaller) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAModule(node);
    }

    public void inAModuleCaller(AModuleCaller node)
    {
        defaultIn(node);
    }

    public void outAModuleCaller(AModuleCaller node)
    {
        defaultOut(node);
    }

    public void caseAModuleCaller(AModuleCaller node)
    {
        inAModuleCaller(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAModuleCaller(node);
    }

    public void inANotFirstImportModule(ANotFirstImportModule node)
    {
        defaultIn(node);
    }

    public void outANotFirstImportModule(ANotFirstImportModule node)
    {
        defaultOut(node);
    }

    public void caseANotFirstImportModule(ANotFirstImportModule node)
    {
        inANotFirstImportModule(node);
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        {
            Object temp[] = node.getImportAlias().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PImportAlias) temp[i]).apply(this);
            }
        }
        outANotFirstImportModule(node);
    }

    public void inANotFirstImportId(ANotFirstImportId node)
    {
        defaultIn(node);
    }

    public void outANotFirstImportId(ANotFirstImportId node)
    {
        defaultOut(node);
    }

    public void caseANotFirstImportId(ANotFirstImportId node)
    {
        inANotFirstImportId(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getImportAlias().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PImportAlias) temp[i]).apply(this);
            }
        }
        outANotFirstImportId(node);
    }

    public void inAImportAlias(AImportAlias node)
    {
        defaultIn(node);
    }

    public void outAImportAlias(AImportAlias node)
    {
        defaultOut(node);
    }

    public void caseAImportAlias(AImportAlias node)
    {
        inAImportAlias(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAImportAlias(node);
    }

    public void inAFuncCall(AFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCall(AFuncCall node)
    {
        defaultOut(node);
    }

    public void caseAFuncCall(AFuncCall node)
    {
        inAFuncCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAFuncCall(node);
    }

    public void inACompAndComparison(ACompAndComparison node)
    {
        defaultIn(node);
    }

    public void outACompAndComparison(ACompAndComparison node)
    {
        defaultOut(node);
    }

    public void caseACompAndComparison(ACompAndComparison node)
    {
        inACompAndComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outACompAndComparison(node);
    }

    public void inAOrCompComparison(AOrCompComparison node)
    {
        defaultIn(node);
    }

    public void outAOrCompComparison(AOrCompComparison node)
    {
        defaultOut(node);
    }

    public void caseAOrCompComparison(AOrCompComparison node)
    {
        inAOrCompComparison(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAOrCompComparison(node);
    }

    public void inAComparisonComparison(AComparisonComparison node)
    {
        defaultIn(node);
    }

    public void outAComparisonComparison(AComparisonComparison node)
    {
        defaultOut(node);
    }

    public void caseAComparisonComparison(AComparisonComparison node)
    {
        inAComparisonComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAComparisonComparison(node);
    }

    public void inAAndCompComparison(AAndCompComparison node)
    {
        defaultIn(node);
    }

    public void outAAndCompComparison(AAndCompComparison node)
    {
        defaultOut(node);
    }

    public void caseAAndCompComparison(AAndCompComparison node)
    {
        inAAndCompComparison(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAndCompComparison(node);
    }

    public void inAGreatComparison(AGreatComparison node)
    {
        defaultIn(node);
    }

    public void outAGreatComparison(AGreatComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreatComparison(AGreatComparison node)
    {
        inAGreatComparison(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAGreatComparison(node);
    }

    public void inALessComparison(ALessComparison node)
    {
        defaultIn(node);
    }

    public void outALessComparison(ALessComparison node)
    {
        defaultOut(node);
    }

    public void caseALessComparison(ALessComparison node)
    {
        inALessComparison(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outALessComparison(node);
    }

    public void inAGreatEqComparison(AGreatEqComparison node)
    {
        defaultIn(node);
    }

    public void outAGreatEqComparison(AGreatEqComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreatEqComparison(AGreatEqComparison node)
    {
        inAGreatEqComparison(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAGreatEqComparison(node);
    }

    public void inALessEqComparison(ALessEqComparison node)
    {
        defaultIn(node);
    }

    public void outALessEqComparison(ALessEqComparison node)
    {
        defaultOut(node);
    }

    public void caseALessEqComparison(ALessEqComparison node)
    {
        inALessEqComparison(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outALessEqComparison(node);
    }

    public void inANotEqComparison(ANotEqComparison node)
    {
        defaultIn(node);
    }

    public void outANotEqComparison(ANotEqComparison node)
    {
        defaultOut(node);
    }

    public void caseANotEqComparison(ANotEqComparison node)
    {
        inANotEqComparison(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outANotEqComparison(node);
    }

    public void inACompEqComparison(ACompEqComparison node)
    {
        defaultIn(node);
    }

    public void outACompEqComparison(ACompEqComparison node)
    {
        defaultOut(node);
    }

    public void caseACompEqComparison(ACompEqComparison node)
    {
        inACompEqComparison(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outACompEqComparison(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        outAFalseComparison(node);
    }

    public void inANotCComparison(ANotCComparison node)
    {
        defaultIn(node);
    }

    public void outANotCComparison(ANotCComparison node)
    {
        defaultOut(node);
    }

    public void caseANotCComparison(ANotCComparison node)
    {
        inANotCComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANotCComparison(node);
    }

    public void inAFCallValue(AFCallValue node)
    {
        defaultIn(node);
    }

    public void outAFCallValue(AFCallValue node)
    {
        defaultOut(node);
    }

    public void caseAFCallValue(AFCallValue node)
    {
        inAFCallValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFCallValue(node);
    }

    public void inANumberValue(ANumberValue node)
    {
        defaultIn(node);
    }

    public void outANumberValue(ANumberValue node)
    {
        defaultOut(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        inANumberValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberValue(node);
    }

    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringValue(node);
    }

    public void inANoneValue(ANoneValue node)
    {
        defaultIn(node);
    }

    public void outANoneValue(ANoneValue node)
    {
        defaultOut(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        inANoneValue(node);
        if(node.getNone() != null)
        {
            node.getNone().apply(this);
        }
        outANoneValue(node);
    }
}
