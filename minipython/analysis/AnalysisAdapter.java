/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAGoal(AGoal node)
    {
        defaultCase(node);
    }

    public void caseAFuncGoalHelper(AFuncGoalHelper node)
    {
        defaultCase(node);
    }

    public void caseAStmtGoalHelper(AStmtGoalHelper node)
    {
        defaultCase(node);
    }

    public void caseAFunction(AFunction node)
    {
        defaultCase(node);
    }

    public void caseAArgument(AArgument node)
    {
        defaultCase(node);
    }

    public void caseANotFirstArgument(ANotFirstArgument node)
    {
        defaultCase(node);
    }

    public void caseAConditionStatement(AConditionStatement node)
    {
        defaultCase(node);
    }

    public void caseALoopWhileStatement(ALoopWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseALoopForStatement(ALoopForStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignEqStatement(AAssignEqStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignEqOperationStatement(AAssignEqOperationStatement node)
    {
        defaultCase(node);
    }

    public void caseAArrayAssignStatement(AArrayAssignStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallStatement(AFuncCallStatement node)
    {
        defaultCase(node);
    }

    public void caseAImportStatement(AImportStatement node)
    {
        defaultCase(node);
    }

    public void caseAPlusExpression(APlusExpression node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticOperationExpression(AArithmeticOperationExpression node)
    {
        defaultCase(node);
    }

    public void caseAValExpression(AValExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinMaxExpression(AMinMaxExpression node)
    {
        defaultCase(node);
    }

    public void caseALenExpression(ALenExpression node)
    {
        defaultCase(node);
    }

    public void caseAFunctionExpression(AFunctionExpression node)
    {
        defaultCase(node);
    }

    public void caseASubscriptionExpression(ASubscriptionExpression node)
    {
        defaultCase(node);
    }

    public void caseAArrayExpression(AArrayExpression node)
    {
        defaultCase(node);
    }

    public void caseAWithoutFromImportRule(AWithoutFromImportRule node)
    {
        defaultCase(node);
    }

    public void caseAWithFromImportRule(AWithFromImportRule node)
    {
        defaultCase(node);
    }

    public void caseAModule(AModule node)
    {
        defaultCase(node);
    }

    public void caseAModuleCaller(AModuleCaller node)
    {
        defaultCase(node);
    }

    public void caseANotFirstImportModule(ANotFirstImportModule node)
    {
        defaultCase(node);
    }

    public void caseANotFirstImportId(ANotFirstImportId node)
    {
        defaultCase(node);
    }

    public void caseAImportAlias(AImportAlias node)
    {
        defaultCase(node);
    }

    public void caseAFuncCall(AFuncCall node)
    {
        defaultCase(node);
    }

    public void caseACompAndComparison(ACompAndComparison node)
    {
        defaultCase(node);
    }

    public void caseAOrCompComparison(AOrCompComparison node)
    {
        defaultCase(node);
    }

    public void caseAComparisonComparison(AComparisonComparison node)
    {
        defaultCase(node);
    }

    public void caseAAndCompComparison(AAndCompComparison node)
    {
        defaultCase(node);
    }

    public void caseAGreatComparison(AGreatComparison node)
    {
        defaultCase(node);
    }

    public void caseALessComparison(ALessComparison node)
    {
        defaultCase(node);
    }

    public void caseAGreatEqComparison(AGreatEqComparison node)
    {
        defaultCase(node);
    }

    public void caseALessEqComparison(ALessEqComparison node)
    {
        defaultCase(node);
    }

    public void caseANotEqComparison(ANotEqComparison node)
    {
        defaultCase(node);
    }

    public void caseACompEqComparison(ACompEqComparison node)
    {
        defaultCase(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        defaultCase(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        defaultCase(node);
    }

    public void caseANotCComparison(ANotCComparison node)
    {
        defaultCase(node);
    }

    public void caseAFCallValue(AFCallValue node)
    {
        defaultCase(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        defaultCase(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        defaultCase(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        defaultCase(node);
    }

    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinusEq(TMinusEq node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTDmult(TDmult node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDivEq(TDivEq node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTCompEq(TCompEq node)
    {
        defaultCase(node);
    }

    public void caseTGreatEq(TGreatEq node)
    {
        defaultCase(node);
    }

    public void caseTLessEq(TLessEq node)
    {
        defaultCase(node);
    }

    public void caseTNotEq(TNotEq node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTExclam(TExclam node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBr(TLBr node)
    {
        defaultCase(node);
    }

    public void caseTRBr(TRBr node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTElif(TElif node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    public void caseTLen(TLen node)
    {
        defaultCase(node);
    }

    public void caseTMax(TMax node)
    {
        defaultCase(node);
    }

    public void caseTMin(TMin node)
    {
        defaultCase(node);
    }

    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    public void caseTNone(TNone node)
    {
        defaultCase(node);
    }

    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTGreat(TGreat node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseTSep(TSep node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
