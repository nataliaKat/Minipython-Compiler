Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	tab = 9;
	plus = '+';
	minus_eq = '-=';
	minus = '-';
	dmult = '**';
	mult = '*';
	div_eq = '/=';
	div = '/';
	mod = '%';
	comp_eq = '==';
	great_eq = '>=';
	less_eq = '<=';
	not_eq = '!=';
	eq = '=';
	exclam = '!';
	def = 'def';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma=',';
	and = 'and';
	or = 'or';
	not = 'not';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	for = 'for';
	in = 'in';
	print = 'print';
	return = 'return';
	assert = 'assert';
	len = 'len';
	max = 'max';
	min = 'min';
	import = 'import';
	from = 'from';
	none = 'None';
	as = 'as';
	less = '<';
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol; 
	number = digit+ | (digit+ '.' digit+);
	id = letter (letter | digit)*;
	string = '"'not_eol* '"' | ;
	string_single_quote = '''not_eol* ''' | ;
	quote = '"';
	single_quote = ''';
	sep = '.';

Ignored Tokens
	blank, line_comment;
	
Productions
	// να δούμε προτεραιότητες πχ len([1, 2, 3])
	goal = goal_helper*;
	goal_helper = {func} function | {stmt} statement;

	function = def id l_par argument? r_par semi statement;

	argument = id assignment?;

	assignment = eq value;

	// not finished
	statement = {condition} tab* if comparison semi statement |
				{loop_while} tab* while comparison semi statement |
				{loop_for} tab* for [id1]:id in [id2]:id semi statement |
				{return} tab* return expression |
				{print} tab* print expression not_first_arg* |
				{assign_eq} tab* id eq expression |
				{assign_mineq} tab* id minus_eq expression |
				{assign_diveq} tab* id div_eq expression |
				{array} tab* id l_br [ex1]:expression r_br eq [ex2]:expression |
				{assert} tab* id expression not_first_arg? |
				{func_call} tab* func_call;
	
	//TODO
	expression = {second_level}second_level |
				{array} l_br expression not_first_expression* r_br;
				/*{multiplication} [exp1]:expression mult [exp2]:expression |
				{division} [exp1]:expression div [exp2]:expression |
				{mod} [exp1]:expression mod [exp2]:expression |
				{plus} [exp1]:expression plus [exp2]:expression |
				{minus} [exp1]:expression minus [exp2]:expression */

	/*expression = {multiplication} multiplication |
					{addition} expression plus multiplication|
					{subtraction} expression minus multiplication;
					
	multiplication = {something} something | 
						  {multiplication} multiplication mult something;
	

	something ={identifier}id|
				  {numb}number|
				  {par} l_par expression r_par;*/

	second_level = {something} first_level |

			{power} second_level dmult first_level;
	//max_rule = max l_par value not_first_value* r_par;

	first_level = {val} value |
				{identifier} id |
				{function} func |
				{subscription} id l_br expression r_br;

	func = {max} max l_par value not_first_value* r_par |
			{min} min l_par value not_first_value* r_par |
			{len} len l_par expression r_par |
			{function} func_call;

	not_first_value = comma value;

	not_first_expression = comma expression;

	import_rule = {without_from} import module import_alias? not_first_import_module* |
				{with_from} from module import id import_alias? not_first_import_id*;

	module = module_caller* id;

	module_caller = id sep;

	not_first_import_module = comma module import_alias?;

	not_first_import_id = comma id import_alias?;

	import_alias = as id;

	func_call = id l_par arglist? r_par;

	arglist = expression not_first_arg*;

	not_first_arg = comma expression;

	comparison_wrapper = {or_comp}[c1]:comparison or [c2]:comparison |
						{and_comp}[c1]:comparison and [c2]:comparison;

	comparison ={great} [exp1]:expression great [exp2]:expression |
				{less} [exp1]:expression less [exp2]:expression |
				{great_eq} [exp1]:expression great_eq [exp2]:expression |
				{less_eq} [exp1]:expression less_eq [exp2]:expression |
				{not_eq} [exp1]:expression not_eq [exp2]:expression |	
				{comp_eq} [exp1]:expression comp_eq [exp2]:expression |
				{true} true |
				{false} false |
				{not_c} not comparison;

	

	value = {f_call} id sep func_call |
			{num} number |
			{string} string |
			{string_single_quote} string_single_quote |
			{none} none;
	


	

	/*programme = commands*;
	
	commands ={stat} statement|
				 {expr}expression;
	
	
	statement ={if}tab* if  comparison semi statement |
				  {assign}tab* id eq expression |
				  {print}tab* print expression;

*/
	/*comparison = {true} true|
					 {false} false|
					 {lessc} [lpar]:expression less [rpar]:expression|
					 {greatc}[lpar]:expression great [rpar]:expression;
	

	expression = {multiplication} multiplication |
					{addition} expression plus multiplication|
					{subtraction} expression minus multiplication;
					
	multiplication = {something} something | 
						  {multiplication} multiplication mult something;
	

	something ={identifier}id|
				  {numb}number|
				  {par} l_par expression r_par;
	
	value = id sep function_call;

	function_call = i;

	value = {fun_call} id sep function_call |
			{num} number |
			{double_quotes} quote;

	arglist = expression;


*/

	/* REDEFINITION ERROR - idio onoma enallaktikwn -> {greatc}
	*comparison = {true} true|
	*				 {false} false|
	*				 {greatc} [lpar]:expression less [rpar]:expression|
	*				 {greatc}[lpar]:expression great [rpar]:expression;
	*/

	/*
	  SHIFT/REDUCE conflict 
		expression = {multiplication} multiplication |
					{addition} [e1]:expression plus [e2]:expression|
					{subtraction} expression minus multiplication;
*/

	/*
	* REDEFINITION ERROR - idio onoma kanona
	* 	comparison ={if}tab* if  comparison semi statement |
	*			  {assign}tab* id eq expression |
	*			  {print}tab* print expression;
	* 
	*
	*/


	/*
	* REDUCE/REDUCE conflict - dyo kanones idies enallaktikes 
	* anagontai ston idio kanona-patera (pou einai o multiplication)
	*
	*multiplication = {something} something |
	*				 {s1} something1 |
	*				 {multiplication} multiplication mult something;
	*
	*something ={identifier}id|
	*		 	  	   {numb}number|
	*			       {par} l_par expression r_par;
	*
	*something1 ={identifier}id|
	*		 	  	   {numb}number|
	*			       {par} l_par expression r_par;
	*
	*/	
	