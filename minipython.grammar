/* 
* Davari Athina             8180020
* Drosos Georgios-Petros    8180024
* Katsiapi Natalia          8180040
* Liargkovas Georgios       8180061
*/

Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 
	quote = '"';
	single_quote = ''';

Tokens
	tab = 9;
	plus = '+';
	minus_eq = '-=';
	minus = '-';
	dmult = '**';
	mult = '*';
	div_eq = '/=';
	div = '/';
	mod = '%';
	comp_eq = '==';
	great_eq = '>=';
	less_eq = '<=';
	not_eq = '!=';
	eq = '=';
	exclam = '!';
	def = 'def';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma=',';
	and = 'and';
	or = 'or';
	not = 'not';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	for = 'for';
	in = 'in';
	print = 'print';
	return = 'return';
	assert = 'assert';
	len = 'len';
	max = 'max';
	min = 'min';
	import = 'import';
	from = 'from';
	none = 'None';
	as = 'as';
	less = '<';
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol; 
	number = digit+ | (digit+ '.' digit+);
	// Identifiers can also start with or contain underscope
	id = (letter | '_')(letter | digit | '_')*;
	string_literal = quote [not_eol - quote]* quote | 
					single_quote [not_eol - single_quote]* single_quote;
	sep = '.';

Ignored Tokens
	blank, line_comment;
	
Productions
	goal = goal_helper*;
	goal_helper = {func} function | {stmt} statement;

	function = def id l_par argument? r_par semi statement;

	argument = id assignment? not_first_argument*;

	// Helper rule for more than one arguments in function declaration
	not_first_argument = comma id assignment?;

	assignment = eq value;

	// import has been added as an alternative
	statement = {condition} tab* if comparison_or semi statement |
				{loop_while} tab* while comparison_or semi statement |
				{loop_for} tab* for [id1]:id in [id2]:id semi statement |
				{return} tab* return expression |
				{print} tab* print expression not_first_arg* |
				{assign_eq} tab* id eq expression |
				{assign_mineq} tab* id minus_eq expression |
				{assign_diveq} tab* id div_eq expression |
				{array_assign} tab* id l_br [ex1]:expression r_br eq [ex2]:expression |
				{assert} tab* assert expression not_first_arg? |
				{func_call} tab* func_call |
				{import} import_rule;
	
	/* 
	* If we try to convert BNF directly, we have shift/reduce conflicts. So, we 
	* constructed multiplication, power and first_level rules which gather different options with 
	* same/similar priority to avoid this.
	*/
	expression = {mult} multiplication |
				{plus} expression plus multiplication |
				{minus} expression minus multiplication;
	
	multiplication = {power} power | 
					{multiplication} multiplication mult power |
					{division} multiplication div power |
					{mod} multiplication mod power;

	power = {something} first_level |
			{power} power dmult first_level;

	/* These alternatives have the highest priority */
	first_level = {val} value |
				{identifier} id |
				{max} max l_par value not_first_value* r_par |
				{min} min l_par value not_first_value* r_par |
				{len} len l_par expression r_par |
				{function} func_call |
				{subscription} id l_br expression r_br |
				{array} l_br expression not_first_expression* r_br;

	not_first_value = comma value;

	not_first_expression = comma expression;

	import_rule = {without_from} import module import_alias? not_first_import_module* |
				{with_from} from module import id import_alias? not_first_import_id*;

	module = module_caller* id;

	module_caller = id sep;

	not_first_import_module = comma module import_alias?;

	// Helper rule for more than one import identifiers
	not_first_import_id = comma id import_alias?;

	import_alias = as id;

	func_call = id l_par arglist? r_par;

	arglist = expression not_first_arg*;

	// Helper rule for more than one arguments in a function
	not_first_arg = comma expression;

	comparison_or = {comp_and} comparison_and |
					{or_comp} comparison_or or comparison_and;

	comparison_and = {comparison} comparison |
						{and_comp} comparison_and and comparison;

	// not_c will always be of lower priority than other alternatives
	comparison = {great} [exp1]:expression great [exp2]:expression |
				{less} [exp1]:expression less [exp2]:expression |
				{great_eq} [exp1]:expression great_eq [exp2]:expression |
				{less_eq} [exp1]:expression less_eq [exp2]:expression |
				{not_eq} [exp1]:expression not_eq [exp2]:expression |	
				{comp_eq} [exp1]:expression comp_eq [exp2]:expression |
				{true} true |
				{false} false |
				{not_c} not comparison;

	value = {f_call} id sep func_call |
			{num} number |
			{string} string_literal |
			{none} none;
	